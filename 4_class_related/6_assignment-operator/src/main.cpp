#include <iostream>

// if a assignment operator is not defined in a class
// a default assignment operator will be generated by the compiler
// if the class contains pointer or reference properties, using the default copy constructor is not sufficient

// with class containing pointer, need to build more
// constructor
// destructor
// copy constructor
// assignment operator

class polynomial
{
    private:
    int degree;
    float *coefficient;

    public:
    polynomial(void) {
        this->degree = 0;
        this->coefficient = NULL;
    }

    polynomial(int d) {
        this->degree = d;
        this->coefficient = new float[d + 1];
    }

    polynomial(const polynomial &existObject) {
        this->degree = existObject.degree;
        this->coefficient = new float[existObject.degree + 1];
        for (int i = 0; i <= existObject.degree; i++) {
            this->coefficient[i] = existObject.coefficient[i];
        }
    }

    ~polynomial(void) {
        this->degree = 0;
        delete this->coefficient;
    }

    // assignment operator
    const polynomial &operator=(const polynomial &source) {
        this->degree = source.degree;
        for (int i = 0; i <= source.degree; i++) {
            this->coefficient[i] = source.coefficient[i];
        }

        return source;
    }

    void enterPolynomial(void) {
        std::cout << "Enter factors: " << std::endl;
        for (int i = 0; i <= degree; i++) {
            std::cout << "Enter factor of x^" << degree - i << ":";
            std::cin >> this->coefficient[i];
            std::cin.ignore(1);
        }
    }

    void printPolynomial(void) {
        if (0 == this->degree) {
            std::cout << "No polynomial" << std::endl;
        }
        else {
            for (int i = 0; i <= degree; i++) {
                if (1 < (degree - i)) {
                    if (1 == this->coefficient[i]) {
                        std::cout << "x^" << degree - i << " + ";
                    }
                    else {
                        std::cout << this->coefficient[i] << "x^" << degree - i << " + ";
                    }
                }
                else if (1 == (degree - i)) {
                    if (1 == this->coefficient[i]) {
                        std::cout << "x" << " + ";
                    }
                    else {
                        std::cout << this->coefficient[i] << "x" << " + ";
                    }
                }
                else {
                    std::cout << this->coefficient[i] << " = 0" << std::endl;
                }
            }
        }

    }
};

int main(void)
{
    // not every statement containing the '=' sign calls the assignment operator

    // call to constructor with arguments
    polynomial *y = new polynomial(3);
    y->enterPolynomial();
    std::cout << "y: ";
    y->printPolynomial();

    // call to copy constructor
    polynomial z1 = *y;
    std::cout << "z1: ";
    z1.printPolynomial();

    polynomial z2(3);
    // call to assignment operator
    z2 = *y;
    std::cout << "z2: ";
    z2.printPolynomial();

    return 0;
}
